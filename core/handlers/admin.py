import statistics

from telebot.types import Message, ReactionTypeEmoji

import core.markups
from core import *
from core.Logers import LoggingConfigurations
from core.db import User, AdminRate, BlackList
from main import bot

logger = LoggingConfigurations.main

@bot.message_handler(commands=['local', 'l', 'loc'], chat_types="supergroup")
def local(message: Message):
    bot.set_message_reaction(GROUP_ID, message.message_id, [ReactionTypeEmoji('üò¥')], is_big=False)


@bot.message_handler(commands=['info'], chat_types="supergroup")
def my_info(message: Message):
    bot.send_message(
        message.chat.id,
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n"
        f"ID: {message.from_user.id}\n"
        f"username: @{message.from_user.username}\n"
        f"fullname: {message.from_user.full_name}\n"
        f"language: {message.from_user.language_code}\n"
        f"premium: {message.from_user.is_premium}\n",
        message_thread_id=message.message_thread_id
    )
    my_rate(message=message)

@bot.message_handler(commands=['my_rate', 'rate_info', 'rating'], chat_types=["supergroup", "private"])
def my_rate(message: Message):
    Rates = AdminRate(message.from_user.id)
    my_rates_list = Rates.get_rate()
    if my_rates_list is not None:
        my_rates_list = [rate_obj[1] for rate_obj in my_rates_list]
        average_rating = statistics.mean(my_rates_list)
        bot.send_message(message.chat.id, f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {round(average_rating, 1)}", message_thread_id=message.message_thread_id)
    else:
        bot.send_message(message.chat.id, "–û—Ü–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", message_thread_id=message.message_thread_id)
    Rates.exit()

@bot.message_handler(commands=['rate_ping'], chat_types="supergroup")
def rate(message: Message):
    messageID = message.id
    adminID = message.from_user.id
    adminNAME = message.from_user.username
    if GROUP_ID == int(message.chat.id) and message.is_topic_message is not None:
        ticketID = message.message_thread_id
        userD = User(ticketID=ticketID)
        if userD.userdata is not None:
            try:
                userID = userD.userdata.id
                bot.send_message(
                    userID,
                    "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç 1 –¥–æ 5:",
                    reply_markup=core.markups.rate_support(adminID)
                )
                bot.send_message(GROUP_ID, "–î–∏–∞–ª–æ–≥ –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", message_thread_id=message.message_thread_id)
            except Exception as err:
                bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∫–∏.")
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∫–∏ \n error: {str(err)}")
        else:
            bot.reply_to(message,"userID –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        userD.exit()

@bot.message_handler(commands=['rate_history'], chat_types=["supergroup", "private"])
def rate_history(message: Message):
    Rates = AdminRate(message.from_user.id)
    my_rates_list = Rates.get_rate()
    if my_rates_list is not None:
        rates_list_msg = ""
        rate_num = 0
        for rate_data in reversed(my_rates_list):
            if rate_num < 10:
                rates_list_msg += (
                    f"UID: {rate_data[3]}\n"
                    f"date: {rate_data[2]}\n"
                    f"rate: {rate_data[1]}\n"
                    f"============\n"
                )
            rate_num += 1
        rates_list_msg += f"0-10/{rate_num}"
        my_rates_list = [rate_obj[1] for rate_obj in my_rates_list]
        average_rating = statistics.mean(my_rates_list)
        bot.send_message(message.chat.id, rates_list_msg,message_thread_id=message.message_thread_id)
        bot.send_message(message.chat.id, f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {round(average_rating, 1)}", message_thread_id=message.message_thread_id)
    else:
        bot.send_message(message.chat.id, "–û—Ü–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", message_thread_id=message.message_thread_id)
    Rates.exit()

@bot.message_handler(commands=['ban'], chat_types=["supergroup"])
def ban_user(message: Message):
    messageID = message.id
    adminID = message.from_user.id
    adminNAME = message.from_user.username
    if GROUP_ID == int(message.chat.id) and message.is_topic_message is not None:
        ticketID = message.message_thread_id
        userD = User(ticketID=ticketID)
        if userD.userdata is not None:
            if int(userD.userdata.id) in [1281134018, 5469853944]:
                bot.reply_to(message, "–î–æ—Ö—É—è –±–µ–∑ —Å–º–µ—Ä—Ç–Ω—ã–π? –ø–∏–∑–¥—ã –¥–∞—Ç—å?")
            else:
                if BlackList().add_to_blacklist(int(userD.userdata.id), adminNAME, ""):
                    bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                else:
                    bot.reply_to(message, "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... –æ–Ω —á—Ç–æ –±–µ–∑—Å–º–µ—Ä—Ç–Ω—ã–π?")
        else:
            bot.reply_to(message, "userID –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        userD.exit()

@bot.message_handler(commands=['unban'], chat_types=["supergroup"])
def unban_user(message: Message):
    messageID = message.id
    adminID = message.from_user.id
    adminNAME = message.from_user.username
    if GROUP_ID == int(message.chat.id) and message.is_topic_message is not None:
        ticketID = message.message_thread_id
        userD = User(ticketID=ticketID)
        if userD.userdata is not None:
            if int(userD.userdata.id) in [1281134018, 5469853944]:
                bot.reply_to(message, "–ë–æ–≥ –µ—Å—Ç—å –±–æ–≥, –µ–≥–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—ç—Ç–æ–º—É –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ :–∑")
            else:
                if BlackList().remove_from_blacklist(int(userD.userdata.id)):
                    bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                else:
                    bot.reply_to(message, "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... –Ω–µ —Å—É–¥—å–±–∞ :–∑")
        else:
            bot.reply_to(message, "userID –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        userD.exit()